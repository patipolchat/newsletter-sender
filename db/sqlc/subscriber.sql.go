// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: subscriber.sql

package sqlc

import (
	"context"
)

const countActiveSubscriber = `-- name: CountActiveSubscriber :one
SELECT COUNT(*)
FROM subscribers
WHERE active = true
`

func (q *Queries) CountActiveSubscriber(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, countActiveSubscriber)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getActiveSubscribersWithPaginate = `-- name: GetActiveSubscribersWithPaginate :many
SELECT id, email, created_at, updated_at, active
FROM subscribers
WHERE active = true
ORDER BY created_at ASC LIMIT $1
OFFSET $2
`

type GetActiveSubscribersWithPaginateParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetActiveSubscribersWithPaginate(ctx context.Context, arg GetActiveSubscribersWithPaginateParams) ([]Subscriber, error) {
	rows, err := q.db.Query(ctx, getActiveSubscribersWithPaginate, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subscriber
	for rows.Next() {
		var i Subscriber
		if err := rows.Scan(
			&i.ID,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubscriber = `-- name: GetSubscriber :one
SELECT id, email, created_at, updated_at, active
FROM subscribers
WHERE email = $1
`

func (q *Queries) GetSubscriber(ctx context.Context, email string) (Subscriber, error) {
	row := q.db.QueryRow(ctx, getSubscriber, email)
	var i Subscriber
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Active,
	)
	return i, err
}

const upsertSubscriber = `-- name: UpsertSubscriber :one
INSERT INTO subscribers (email, active)
VALUES ($1, $2) ON CONFLICT(email)
DO
UPDATE SET active = $2, updated_at = NOW()
    returning id, email, created_at, updated_at, active
`

type UpsertSubscriberParams struct {
	Email  string
	Active bool
}

func (q *Queries) UpsertSubscriber(ctx context.Context, arg UpsertSubscriberParams) (Subscriber, error) {
	row := q.db.QueryRow(ctx, upsertSubscriber, arg.Email, arg.Active)
	var i Subscriber
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Active,
	)
	return i, err
}
