// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package sqlc

import (
	"database/sql/driver"
	"fmt"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

type Status string

const (
	StatusPending   Status = "pending"
	StatusCompleted Status = "completed"
	StatusFailed    Status = "failed"
)

func (e *Status) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Status(s)
	case string:
		*e = Status(s)
	default:
		return fmt.Errorf("unsupported scan type for Status: %T", src)
	}
	return nil
}

type NullStatus struct {
	Status Status
	Valid  bool // Valid is true if Status is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullStatus) Scan(value interface{}) error {
	if value == nil {
		ns.Status, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Status.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullStatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Status), nil
}

type Newsletter struct {
	ID        uuid.UUID
	Header    string
	Body      string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

type SendingEmail struct {
	ID           uuid.UUID
	SubscriberID uuid.UUID
	NewsletterID uuid.UUID
	Status       Status
	CreatedAt    pgtype.Timestamp
	UpdatedAt    pgtype.Timestamp
}

type Subscriber struct {
	ID        uuid.UUID
	Email     string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
	Active    bool
}
