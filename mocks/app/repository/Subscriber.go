// Code generated by mockery v2.42.3. DO NOT EDIT.

package repository

import (
	context "context"
	sqlc "energy-response-assignment/db/sqlc"

	mock "github.com/stretchr/testify/mock"
)

// Subscriber is an autogenerated mock type for the Subscriber type
type Subscriber struct {
	mock.Mock
}

type Subscriber_Expecter struct {
	mock *mock.Mock
}

func (_m *Subscriber) EXPECT() *Subscriber_Expecter {
	return &Subscriber_Expecter{mock: &_m.Mock}
}

// UpsertSubscriber provides a mock function with given fields: ctx, arg
func (_m *Subscriber) UpsertSubscriber(ctx context.Context, arg sqlc.UpsertSubscriberParams) (sqlc.Subscriber, error) {
	ret := _m.Called(ctx, arg)

	if len(ret) == 0 {
		panic("no return value specified for UpsertSubscriber")
	}

	var r0 sqlc.Subscriber
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.UpsertSubscriberParams) (sqlc.Subscriber, error)); ok {
		return rf(ctx, arg)
	}
	if rf, ok := ret.Get(0).(func(context.Context, sqlc.UpsertSubscriberParams) sqlc.Subscriber); ok {
		r0 = rf(ctx, arg)
	} else {
		r0 = ret.Get(0).(sqlc.Subscriber)
	}

	if rf, ok := ret.Get(1).(func(context.Context, sqlc.UpsertSubscriberParams) error); ok {
		r1 = rf(ctx, arg)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Subscriber_UpsertSubscriber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpsertSubscriber'
type Subscriber_UpsertSubscriber_Call struct {
	*mock.Call
}

// UpsertSubscriber is a helper method to define mock.On call
//   - ctx context.Context
//   - arg sqlc.UpsertSubscriberParams
func (_e *Subscriber_Expecter) UpsertSubscriber(ctx interface{}, arg interface{}) *Subscriber_UpsertSubscriber_Call {
	return &Subscriber_UpsertSubscriber_Call{Call: _e.mock.On("UpsertSubscriber", ctx, arg)}
}

func (_c *Subscriber_UpsertSubscriber_Call) Run(run func(ctx context.Context, arg sqlc.UpsertSubscriberParams)) *Subscriber_UpsertSubscriber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(sqlc.UpsertSubscriberParams))
	})
	return _c
}

func (_c *Subscriber_UpsertSubscriber_Call) Return(_a0 sqlc.Subscriber, _a1 error) *Subscriber_UpsertSubscriber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Subscriber_UpsertSubscriber_Call) RunAndReturn(run func(context.Context, sqlc.UpsertSubscriberParams) (sqlc.Subscriber, error)) *Subscriber_UpsertSubscriber_Call {
	_c.Call.Return(run)
	return _c
}

// NewSubscriber creates a new instance of Subscriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscriber(t interface {
	mock.TestingT
	Cleanup(func())
}) *Subscriber {
	mock := &Subscriber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
