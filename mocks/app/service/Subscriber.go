// Code generated by mockery v2.42.3. DO NOT EDIT.

package service

import (
	context "context"
	entity "energy-response-assignment/entity"

	mock "github.com/stretchr/testify/mock"
)

// Subscriber is an autogenerated mock type for the Subscriber type
type Subscriber struct {
	mock.Mock
}

type Subscriber_Expecter struct {
	mock *mock.Mock
}

func (_m *Subscriber) EXPECT() *Subscriber_Expecter {
	return &Subscriber_Expecter{mock: &_m.Mock}
}

// Subscribe provides a mock function with given fields: ctx, email
func (_m *Subscriber) Subscribe(ctx context.Context, email string) (*entity.Subscriber, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 *entity.Subscriber
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Subscriber, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Subscriber); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Subscriber)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Subscriber_Subscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Subscribe'
type Subscriber_Subscribe_Call struct {
	*mock.Call
}

// Subscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *Subscriber_Expecter) Subscribe(ctx interface{}, email interface{}) *Subscriber_Subscribe_Call {
	return &Subscriber_Subscribe_Call{Call: _e.mock.On("Subscribe", ctx, email)}
}

func (_c *Subscriber_Subscribe_Call) Run(run func(ctx context.Context, email string)) *Subscriber_Subscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Subscriber_Subscribe_Call) Return(_a0 *entity.Subscriber, _a1 error) *Subscriber_Subscribe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Subscriber_Subscribe_Call) RunAndReturn(run func(context.Context, string) (*entity.Subscriber, error)) *Subscriber_Subscribe_Call {
	_c.Call.Return(run)
	return _c
}

// Unsubscribe provides a mock function with given fields: ctx, email
func (_m *Subscriber) Unsubscribe(ctx context.Context, email string) (*entity.Subscriber, error) {
	ret := _m.Called(ctx, email)

	if len(ret) == 0 {
		panic("no return value specified for Unsubscribe")
	}

	var r0 *entity.Subscriber
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*entity.Subscriber, error)); ok {
		return rf(ctx, email)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *entity.Subscriber); ok {
		r0 = rf(ctx, email)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Subscriber)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, email)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Subscriber_Unsubscribe_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Unsubscribe'
type Subscriber_Unsubscribe_Call struct {
	*mock.Call
}

// Unsubscribe is a helper method to define mock.On call
//   - ctx context.Context
//   - email string
func (_e *Subscriber_Expecter) Unsubscribe(ctx interface{}, email interface{}) *Subscriber_Unsubscribe_Call {
	return &Subscriber_Unsubscribe_Call{Call: _e.mock.On("Unsubscribe", ctx, email)}
}

func (_c *Subscriber_Unsubscribe_Call) Run(run func(ctx context.Context, email string)) *Subscriber_Unsubscribe_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Subscriber_Unsubscribe_Call) Return(_a0 *entity.Subscriber, _a1 error) *Subscriber_Unsubscribe_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Subscriber_Unsubscribe_Call) RunAndReturn(run func(context.Context, string) (*entity.Subscriber, error)) *Subscriber_Unsubscribe_Call {
	_c.Call.Return(run)
	return _c
}

// NewSubscriber creates a new instance of Subscriber. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewSubscriber(t interface {
	mock.TestingT
	Cleanup(func())
}) *Subscriber {
	mock := &Subscriber{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
